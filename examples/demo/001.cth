type Sample = Float;
type Time   = Int;
type Signal = Sample (Time);

Int const small  = 16;
Int const medium = 64;
Int const large  = 128;
Int const huge   = 1028;

type Buff = buffer [small];

Int  in note;
Int  in press;
Int  in release;
Bool in switch1;
Int  in knob1;
Int  in knob2;

Float realTime (Time time) Float (time) / srate;

//Int const octave = 4;
//Int octave () if (knob2[] > 8) 8 else if (knob2[] < 0) 0 else knob2[];

Int   notePos () note[] % 12;
Int   noteOct () (note[] / 12) - 2;
Float freq    () notes[notePos()] * (2. ** Float (noteOct()));

//Float freq () notes[(note[] % 12)] * (2. ** Float (octave() + 1 + note[] / 12));

// A simple envelope with no sustain time.
Sample (Sample) envelope (
    Float const attack,
    Float const decay,
    Float const sustain,
    Float const frelease
) {
    Float up (Float const x)
        if (x < attack)
            (1. / attack) * x
        else if (x < attack + decay)
            ((sustain - 1.) / decay) * (x - attack) + 1.
        else
            sustain;
    Float down (Float const x)
        if (x < frelease)
            -(sustain / frelease) * x + sustain
        else
            0.;

    return Sample fn (Sample sample)
        if (press[] >= 0)
            sample * up(realTime(press[]))
        else if (release[] >= 0)
            sample * down(realTime(release[]))
        else
            0.;
};

// A configurable saw wave:
Sample (Time) saw (Float amp, Float freq)
    Sample fn (Time time)
        amp * (2. * ((freq * realTime(time)) % 1.) - 1.);

Sample tone (Time time) saw(.9, freq())(time);

Sample () avg (Int const size)
    Sample () fn (buffer [small] input) Sample fn () {
        Int const n = if (size > small) small else size;
        Sample result = 0.;
        for (Int const i in [0 to -n])
            result = result + input[i];
        return result / Sample (n);
    };

buffer [1] out out1 = buffer [1] (Sample fn ()
    (Float (knob1) / 100.) *
        if (switch1[])
            avg(12)(Buff (tone))()
        else
            envelope(0.2, 0.1, 0.7, 0.2)(avg(12)(Buff (tone))())
);
