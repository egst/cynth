# This file explains referential semantics of arrays with examples.

# Assigning to an array (or defining an array) means changing (or setting) its internal reference to the given array value.

# This allocates new arrays [1, 2] and [2, 3] and makes a and b refer to them:
Int [2] a = [1, 2];
Int [2] b = [2, 3];

# This allocates a new array value [3, 4] and makes a refer to it:
a = [3, 4];

# This makes a refer to the same value as b does:
a = b;

# This makes b refer to a new value, while a still refers to [2, 3]:
b = [5, 6];

# This again makes a refer to the same value as b does:
a = b;

# Assigning by elements to an array is semantically equivalent to assigning to a value of the type of its elements.

# This changes the value refered to by a (which is the same value that b refers to) to [6, 6]:
a[0] = 6;

# To prevent any changes to the internal reference of an array, its type can be made const:

Int [2] const c = [1, 2];

# This would be an error:
#c = [2, 3];

# This would be an error:
# A const array's internal reference can't be changed, so it must be initialized upon definition.
#Int [2] const c;

# It is still possible to assign by elements though:
c[1] = 1;

# To prevent any changes to the array's elements, its element type can be made const:
Int const [2] d;

# A const-valued array may be declared with no definition (with no initial internal reference)
# and the reference may be reassigned at any time:
d = [1, 2];

# Hovever, this would be an error:
# d[1] = 1;

# When passing arrays around, conversions take place as with other values.
# However, these conversions never modify the refered to values.
# Arrays can be thought of as referential views over their elements.
# Converting such views may change the way the elements might be accessed, but it doesn't modify the elements.

# An array literal (constructor) produces an array of type T [n] for some non-const type T.
# As soon as it is passed somewhere, its type might be converted.

# The following conversions are possible:
# T [n]       -> T [m] for m <= n.
# T [n]       -> T [m] const
# T [n] const -> T [m]
# T [n]       -> T const [m]

# Note that the last conversion shifts the concept of constness
# from "can never change its value" to "its value can never be directly changed".
# I.e. const values might still be volatile, meaning their value may change externally.

Int [3] e = [1, 2, 3];

# This makes f refer to the first 2 elements of what e refers to,
# and restricts any element modification or reassignment of the internal reference:
Int const [2] const f = e;

# This modifies the value refed to by both e and f through e.
e[1] = 2;

# While this would be an error:
#f[1] = 3;

# Here only z and w guarantees no modifications to the caller.
# The caller must provide non-const-valued arrays for x and y.
# The internal reference of x and z may be changed inside the function,
# which won't affect any of the caller's values.
() f (Int [2] x, Int [2] const y, Int const [2] z, Int const [2] const w) {
    # TODO: This should be implicit:
    return;
}

# An array may only be copied by assignment to individual elements.
# The following is a shorthand for copying all elements:
a[] = b;
# All standard rules for assignment by elements apply and,
# additionally, this is allowed only when there is enough of elements to copy from to fill the whole array.

# And just a few examples to explain implementation:

Int [2] arr1 = [1, 2];
#       ^      ^
#       |      create and store a new array value (#1)
#       create a new array variable referencing the assigned value

Int [2] arr2 = [2, 3];
#       ^      ^
#       |      create and store a new array value (#2)
#       create a new array variable referencing the assigned value

Int [2] arr3 = arr1;
#       ^
#       create a new array variable referencing the first stored value ([1, 2])

arr3[] = arr2;
#   ^
#   modify the first stored value to contain the same values as the second stored value ([2, 3])

arr3[] = [3, 4];
#   ^    ^
#   |    create and store a new array value (#3)
#   modify the first stored value to contain the same values as the new third stored value ([3, 4])
# The third stored value is now no longer referenced anywhere and may be deleted.
