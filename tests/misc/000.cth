Int x = 1;
/*
Int y;
(Int z, Int w) = (x + y, 2);
Int const c = 1 + 2;
Int const d = c + 2;

{
    x = 1 + 2;
    y = 1;
    (x, y) = (2, 3);
};

Int a = x % 4;

Int [3] arr = [1, 2, 3];
//Int [c] arr;
Int [c] arr2 = arr;
Int const [c] arr3       = Int const [c] (arr);
Int const [2] const carr = Int const [2] ([1, 2]);
Int const [2] cvarr      = Int const [2] ([1, 2]);
Int [2] const crarr      = [1, 2];

Int e1 = arr[1];
//Int e2 = arr[10];

Int [4] range = [1 to 5];
Int [c] spread1 = [...arr];
Int [c + 1] spread2 = [...arr, 10];
Int [3] const spread3 = [...carr, 10];
Int const [3] spread4 = Int const [3] ([...carr, 10]);
Int [2] view = Int [2] (spread3);

spread3[1] = 2;
view[1] = spread3[2];
view[4] = spread3[2]; // TODO: Compile-time error for out of bounds access.
//spread4[1] = 2;

Int [2] ref  = view;
Int [2] copy = view[];
Int [2] def;
def = view[];
def = view;
def[] = view;

if (false) x = 5 else {
    x = 6;
    Int a = x;
};

if (x == 1) x = 5 else x = 6;
Bool cond = true;
if (cond) x = 5 else x = 6;

x = if (true) 1 else 2;
//x = if (!cond + 1) 1 else 2;
x = if (Bool (Int (!cond) + 1)) 1 else 2;

Bool comp = 1 == 2;

for (Int e in [1, 2]) x = e;

Int [2] m1 = for (Int const e in [1, 2]) e;
Int const [2] m2 = Int const [2] (for (Int const e in [1, 2]) e);
Int const [2] const m3 = Int const [2] (for (Int const e in [1, 2]) e);
Float [2] m = for (Int const e in [1, 2]) if (e == 0) 1 else 1.5;
//Int [2] m = for (Int const e in [1, 2]) if (e == 1) 1 else 1.5;
Int const [2] const m4 = Int const [2] (for (Int e in [1, 2]) e);
Int const [2] const z1 = Int const [2] (for (Int e in [1, 2], Int f in [3 to 5]) e + f);
Int const [2] z2 = Int const [2] (for (Int e in [1, 2], Int f in [3 to 5]) e + f);
Int const [2] z3 = Int const [2] (for (Int e in [1, 2], Int f in [3 to 5]) x + e + f);

Int const u = {
    return 1;
};
Int [u] aa;

Int v = {
    x = 2;
    return x;
};

Int vv = {
    x = 2;
    return 1;
};

(Int, Float) const vu = if (
    x == 2
    //true
) {
    //y = 1;
    return (x + 2, Float (x - 1));
    //return (1, 1.);
} else {
    return (2, 2.);
};

Int n = {
    Int a = 5;
    {
        a = a + 1;
        return a - 2;
    };
};
*/

/*
Int f1 (Int const x) 1;
Int v1 = f1(1);
f1(1);

Int f2 (Int x) 2;
Int v2 = f2(1);
f2(1);

//Float f3 (Int a, Float b) Float (a + Int (b));
Float fu (Int a, Float b) {
    //x = 2;
    return Float (a + Int (b));
};
Float vfu = fu(1, 1.5);
Float f3 (Int a, Float b) {
    //x = 2;
    return Float (a + Int (b));
};
Float v3 = f3(1, 1.5);
f3(1, 1.5);

Int f4 () 4;
Int v4 = f4();
//Int v5 = f4(1);
//Int v6 = f2();

Int (Int) succ = Int fn (Int const x) x + 1;
Int const s = succ(3);
Int [s] ax;
Int z = succ(s);
Int (Int) pred = Int fn (Int x) x - 1;
Int const ss = pred(3);

Int foo (Int y) {
    Int a = x;
    a = a + 1;
    return y + a;
};
Int varfoo = foo(1);
Int bar (Int x) {
    x = x - 1;
    return foo(x);
};
Int varfoobar = bar(5);
*/

Int cc = 1;
//Int (Int) df = if (x == 1) Int fn (Int x) x + cc else Int fn (Int x) x - 1;
/*
Int (Int) df = if (x == 1) Int fn (Int x) x + 1 else Int fn (Int x) x - cc;
df(0);
*/

Int (Int) dff = {
    when (x == 2)
        return Int fn (Int x) x + cc;

    {
        if (x == 1)
            return Int fn (Int x) x - cc;
        else
            return Int fn (Int x) x + 1;
    };

    return Int fn (Int x) x - cc;
};
dff(1);

//buffer [3] b;
//buffer [3] b = buffer [3] (Float fn (Int x) Float (x));
//buffer [3] b2 = b;
//buffer [2] b3 = b; // TODO
//buffer [4] b4 = b;

//Float sample = b2[0]; // TODO

// TODO: data in cth_buff

/*
Int in input1;
Int in input2;
Int in i = input1;
Int in j = if (true) input1 else input2;
Int in k = if (x == 2) input1 else input2;

Int ival  = Int (input1);
//Int ival2 = Int (k); // TODO
Int ival3 = Int (j);
*/

//Int out output1;
//Int out o = output1;
// TODO: Comp-time values for IO pointers.
// Update: They are comp-time, but run-time values are also created.

//x = Int (input1);

// TODO: Type definitions
