(Int, Int const) t = (1, 2);

# This should be an error:
#t = (2, 3);

# Equivalent to (Int const, Int const) u = ...
(Int, Int) const u = (1, 2);

# This should be an error:
#u = (2, 3);

# This should be an error:
# (Declaration of a const value with no immediate definition.)
#Int const a;

Int const b = 1;

# This should be an error:
#b = 2;

Int c;

# This is ok (copy to a non-const value):
c = b;

# This should be all errors:
# (Buffer, in and out cannot be const by definition.)
#buffer [3] const b;
#Int in const b;
#Int out const b;

# This is ok:
# (Functions are const implicitly.)
Int (Int) const f = Int fn (Int x) x + 1;

# TODO: This should be an error:
# (Even implicitly const functions should be immediately defined.)
Int (Int) g;

# These are semantically equivalent:
Int const [2] a1;
Int       [2] a2;

# These aren't:
# (Because of the referential element type.)
Int [2] const [2] a3;
Int [2]       [2] a4;
# TODO: For now, prohibit arrays of any other types than Bool, Int and Float. (Tuples should be ok.)

# These are semantically different for any kind of element type:
Int [2] const a5 = [1, 2]; # No definiton would be an error.
Int [2]       a6;

# Interface of these is semantically equivalent for the caller:
() f1 (Int const x) {
    # The only difference is inside the function.
    # This is an error:
    #x = 2;
};
() f2 (Int x) {
    # This is ok:
    x = 2;
};

# For referential types there is a difference for the caller as well...

() f3 (Int [2] x) {
    # This changes the internal reffernce only:
    x = [1, 2];
    # Any following modifications (assignment by elements) won't affect the caller's argument:
    x[0] = 2;
    x[] = [4, 5];
};

() f4 (Int [2] x) {
    # The interfal reffernce points to the caller's argument,
    # so any modification (assignment by elements) will affect it:
    x[0] = 2;
    x[] = [3, 4];
};

() f5 (Int [2] const x) {
    # This would be an error:
    #x[0] = 2;
    #x[]  = [2, 3];
    #x    = [1, 2];
    # Note that constness prohibits both assignment by elements and reassignment of the internal reference.
};

Int [2] arr = [1, 2];

f3(arr); # Could modify arr, but doesn't.
f4(arr); # Does modify arr.
f5(arr); # Can never modify arr.

return c;
