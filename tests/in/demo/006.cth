type Sample        = Float;
type Time          = Int;
type Signal        = Sample ();
type TimeSignal    = Sample (Time);
type CfgTimeSignal = Sample (Time) (Float, Float);

Int const small  = 16;
Int const medium = 64;
Int const large  = 128;
Int const huge   = 1028;

type SmallBuff = buffer [small];
type Buff      = buffer [medium];

Int  in note;
Int  in press;
//Int  in release;
Int  in knob1;
Int  in knob2;
Int  in knob3;
Bool in switch1;
Bool in switch2;

########

Float realTime (Time time) Float (time) / srate;

Float [medium] test_ = Float [medium] ([0. to Float(medium)]);

//Int const octave = 4;
Int octave () if (knob2[] > 8) 8 else if (knob2[] < 0) 0 else knob2[];
Float freq () notes[(note[] % 12)] * (2. ** Float (octave() + 1 + note[] / 12));

// A simple envelope with no sustain time.
Sample (Sample) env (Float const hold) {
    // TODO: Make these constant.
    Float const base = 4.;
    Float f (Float const x) // Just some cubic function that fits nicely on the (0, 4) interval.
        +1.380952   * (x) +
        -0.6785714  * (x ** 2.) +
        +0.08333333 * (x ** 3.);
    Float fun (Float const x) f(x * base / hold);

    return Sample fn (Sample const sample) {
        when (press[] < 0) return 0.;
        Float time = realTime(press[]);
        return sample * if (time < hold) fun(time) else 0.;
    }
};

Float cos (Float const x) -sin(x - pi / 2.);

TimeSignal sine (Float const amp, Float const freq)
    Sample fn (Time const time)
        amp * sin(realTime(time) * 2. * pi * freq);

TimeSignal saw (Float const amp, Float const freq)
    Sample fn (Time const time)
        amp * (2. * ((freq * realTime(time)) % 1.) - 1.);

TimeSignal triangle (Float const amp, Float const freq) {
    Sample f (Float time) {
        time = time % 1.;
        when (time > .5) time = -time + 1.;
        return 4. * time - 1.;
    };
    return Sample fn (Time time) amp * f(realTime(time) * freq);
};

Signal avg (Int const size)
    Signal fn (SmallBuff input) Sample fn () {
        Int const n = if (size > small) small else size;
        Sample result = 0.;
        for (Int const i in [0 to -n])
            result = result + input[i];
        return result / Sample (n);
    };

########

Float modFreq () Float(if (knob1[] < 1) 1 else knob1[]);
Float modAmp  () Float(knob3[] + 5) / 10.;
Sample lfoa (Time time) sine(modAmp(), 1.)(time);

Sample lfo1 (Time time) sine(.1, modFreq())(time);
Sample lfo2 (Time time) triangle(.3, lfo1(time))(time);
Sample tone (Time time) saw(.9, freq())(time);
Sample mod1 (Time time) tone(time) * lfo2(time);

Sample lfo3 (Time time) sine(.001, modFreq())(time);
Sample mod2 (Time time) sine(.9, freq() * lfo3(time))(time) * lfoa(time);
//Sample mod2 (Time time) sine(.9, freq() * lfo3(time))(time);

/*
Float keyFreq () Float (note * 2);
Sample lfok (Time time) sine(.001, keyFreq())(time);
Sample mod3 (Time time) sine(.9, freq() * lfok(time))(time);
*/

buffer [1] out out1 = buffer [1] (Float fn (Time time) {

    //return avg(16)(buffer[small](mod1))();
    return avg(16)(buffer[small](mod2))();
    //return mod2(time);
    //return avg(16)(buffer[small](mod3))();
    
});
